{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,oBAAoB,QAAQ;AAC5B;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,wCAAwC,aAAa;AACrD;AACO;AACP;AACA;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA;AACA,wCAAwC,YAAY;AACpD;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA;AACA,wCAAwC,YAAY;AACpD;AACA;AACA;AACO;AACP,8CAA8C,EAAE,aAAa,EAAE;AAC/D;AACO;AACP,iDAAiD,YAAY;AAC7D;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,eAAe,OAAO,YAAY;AAC3E;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,YAAY,+CAAQ;AACpB;AACA;AACA;AACA,YAAY,mDAAY;AACxB;AACA,KAAK;AACL;AACO;AACP;AACA;AACA,YAAY,+CAAQ;AACpB;AACA;AACA;AACA,YAAY,mDAAY;AACxB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAM;AAClB;AACA;AACA;AACA;AACA;AACA,YAAY,6CAAM;AAClB;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;AChIwC;AACN;AAC+E;AACjH,mBAAmB,2CAAM,eAAe,iDAAS;AACjD,qBAAqB,2CAAM,wBAAwB,iDAAS;AAC5D;AACA,+CAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,IAAI,iDAAW;AACf;AACA,IAAI,kDAAY,CAAC,8CAAQ;AACzB;AACA,QAAQ,mDAAa;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iDAAW;AACf;AACO;AACP;AACA;AACO;AACP,IAAI,+CAAS;AACb,IAAI,+CAAS;AACb,IAAI,mDAAa;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACzDO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,QAAQ;AAChC;AACA,4BAA4B,QAAQ;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;;;;ACtH8B;AACvB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,uCAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpDO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UCnBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;UENA;UACA;UACA;UACA","sources":["webpack://top-battleship/./src/dom.ts","webpack://top-battleship/./src/game.ts","webpack://top-battleship/./src/gameboard.ts","webpack://top-battleship/./src/player.ts","webpack://top-battleship/./src/ship.ts","webpack://top-battleship/webpack/bootstrap","webpack://top-battleship/webpack/runtime/define property getters","webpack://top-battleship/webpack/runtime/hasOwnProperty shorthand","webpack://top-battleship/webpack/runtime/make namespace object","webpack://top-battleship/webpack/before-startup","webpack://top-battleship/webpack/startup","webpack://top-battleship/webpack/after-startup"],"sourcesContent":["import { gameOn, checkWin, computerTurn } from \"./game\";\n// Draw game boards\n// Draw ships on player's board\n// Refresh board when turn is taken\n// Display whose turn it is\n// Display notification for \"hits\", \"misses\", and \"WIN!\"\nconst displayContainer = document.querySelector(\".display-container\");\nconst playerDisplay = document.querySelector(\".display\");\nconst hitDisplay = document.querySelector(\".hit-display\");\nconst boardContainer = document.querySelector(\".board-container\");\nconst playerBoard = document.querySelector(\".player-board\");\nconst computerBoard = document.querySelector(\".computer-board\");\nconst compDisplay = document.querySelector(\".comp-display\");\nconst sunkDisplay = document.querySelector(\".sunk-display\");\nexport function drawBoard(board, player) {\n    for (let i = 0; i < 10; i++) {\n        const row = document.createElement(\"div\");\n        row.classList.add(\"row\");\n        for (let j = 0; j < 10; j++) {\n            const cell = document.createElement(\"div\");\n            cell.classList.add(\"cell\");\n            cell.dataset.x = j.toString();\n            cell.dataset.y = i.toString();\n            row.appendChild(cell);\n        }\n        if (player === \"Player\") {\n            playerBoard.appendChild(row);\n        }\n        else {\n            computerBoard.appendChild(row);\n        }\n    }\n}\nexport function declareWinner(winner) {\n    hitDisplay.textContent = `WINNER! ${winner.name} has sunk all of their opponent's battleships!`;\n}\nexport function cellAttacked(cell, hit, player) {\n    cell.classList.add(\"attacked\");\n    if (hit) {\n        cell.classList.add(\"hit\");\n        if (player.name === \"Computer\") {\n            compDisplay.textContent = `${player.name}'s attack was a HIT!`;\n        }\n        else {\n            hitDisplay.textContent = `${player.name}'s attack was a HIT!`;\n        }\n    }\n    else {\n        cell.classList.add(\"miss\");\n        if (player.name === \"Computer\") {\n            compDisplay.textContent = `${player.name}'s attack missed`;\n        }\n        else {\n            hitDisplay.textContent = `${player.name}'s attack missed`;\n        }\n    }\n}\nexport function findCell(x, y) {\n    return document.querySelector(`[data-x=\"${x}\"][data-y=\"${y}\"]`);\n}\nexport function refreshTurn(player) {\n    playerDisplay.textContent = `Current turn: ${player.name}`;\n}\nfunction eventTarget(event) {\n    return event.target;\n}\nexport function attackCell(cell, player, attacker) {\n    if (!cell.classList.contains(\"attacked\")) {\n        const result = player.playerboard.receiveAttack(parseInt(cell.dataset.x), parseInt(cell.dataset.y));\n        if (result === 2) {\n            cellAttacked(cell, false, attacker);\n        }\n        else if (result === 3) {\n            cellAttacked(cell, true, attacker);\n        }\n        else if (result === 4) {\n            cellAttacked(cell, true, attacker);\n            sunkDisplay.textContent = `${attacker.name} sunk ${player.name}'s battleship!`;\n            setTimeout(() => {\n                sunkDisplay.textContent = \"\";\n            }, 5000);\n        }\n        return true;\n    }\n    return false;\n}\nexport function setUpListener(computer, player) {\n    computerBoard === null || computerBoard === void 0 ? void 0 : computerBoard.addEventListener(\"click\", (c) => {\n        const result = attackCell(eventTarget(c), computer, player);\n        if (checkWin(player.playerboard, computer.playerboard)) {\n            declareWinner(player);\n        }\n        if (result) {\n            computerTurn();\n        }\n    });\n}\nexport function teardownListener(computer, player) {\n    computerBoard === null || computerBoard === void 0 ? void 0 : computerBoard.removeEventListener(\"click\", (c) => {\n        const result = attackCell(eventTarget(c), computer, player);\n        if (checkWin(player.playerboard, computer.playerboard)) {\n            declareWinner(player);\n        }\n        if (result) {\n            computerTurn();\n        }\n    });\n}\n// Initial game setup - Set event listeners for modal\nconst nameInput = document.querySelector(\"#name\");\nconst modal = document.querySelector(\".start-modal\");\nconst background = document.querySelector(\".start-modal-background\");\nconst startButton = document.querySelector(\"#start-game\");\nexport function gameSetup(player) {\n    startButton.addEventListener(\"click\", () => {\n        if (nameInput.value) {\n            player.name = nameInput.value;\n            modal === null || modal === void 0 ? void 0 : modal.classList.add(\"hidden\");\n            background === null || background === void 0 ? void 0 : background.classList.add(\"hidden\");\n            gameOn();\n        }\n        else {\n            player.name = \"Player\";\n            modal === null || modal === void 0 ? void 0 : modal.classList.add(\"hidden\");\n            background === null || background === void 0 ? void 0 : background.classList.add(\"hidden\");\n            gameOn();\n        }\n    });\n}\n","import { Gameboard } from \"./gameboard\";\nimport { Player } from \"./player\";\nimport { drawBoard, findCell, refreshTurn, setUpListener, gameSetup, declareWinner, cellAttacked, } from \"./dom\";\nconst player = new Player(\"\", true, new Gameboard());\nconst computer = new Player(\"Computer\", false, new Gameboard());\nlet game_on = false;\ngameSetup(player);\n// Ships legend:\n// Size / Name\n// 5 / Carrier\n// 4 / Battleship\n// 3 / Destroyer\n// 3 / Submarine\n// 2 / Patrol Boat\nconst shipLegend = {\n    Carrier: 5,\n    Battleship: 4,\n    Destroyer: 3,\n    Submarine: 3,\n    \"Patrol Boat\": 2,\n};\nexport function computerTurn() {\n    refreshTurn(computer);\n    let coords = computer.randomAttack(player.playerboard);\n    cellAttacked(findCell(coords[0], coords[1]), coords[2] > 2 ? true : false, computer);\n    if (checkWin(player.playerboard, computer.playerboard)) {\n        declareWinner(computer);\n        playerTurn();\n    }\n    else {\n        playerTurn();\n    }\n}\nfunction playerTurn() {\n    refreshTurn(player);\n}\nexport function checkWin(playerBoard, computerBoard) {\n    return playerBoard.checkAllSunk() || computerBoard.checkAllSunk();\n}\nexport function gameOn() {\n    drawBoard(player.playerboard, \"Player\");\n    drawBoard(computer.playerboard, computer.name);\n    setUpListener(computer, player);\n    // Human player goes first because robots need to know their place\n    // Place all ships for computer randomly\n    computer.placeRandomShip(computer.playerboard, 5, \"Carrier\");\n    computer.placeRandomShip(computer.playerboard, 4, \"Battleship\");\n    computer.placeRandomShip(computer.playerboard, 3, \"Destroyer\");\n    computer.placeRandomShip(computer.playerboard, 3, \"Submarine\");\n    computer.placeRandomShip(computer.playerboard, 2, \"Patrol Boat\");\n    // FOR TESTING - Set up all ships for player randomly\n    player.placeRandomShip(player.playerboard, 5, \"Carrier\");\n    player.placeRandomShip(player.playerboard, 4, \"Battleship\");\n    player.placeRandomShip(player.playerboard, 3, \"Destroyer\");\n    player.placeRandomShip(player.playerboard, 3, \"Submarine\");\n    player.placeRandomShip(player.playerboard, 2, \"Patrol Boat\");\n    playerTurn();\n}\n","export class Gameboard {\n    constructor() {\n        // Game board value legend\n        // 0 = empty space\n        // Ship Object array = un-hit ship\n        // 2 = miss\n        // 3 = hit\n        // Ships legend:\n        // Size / Name\n        // 5 / Carrier\n        // 4 / Battleship\n        // 3 / Destroyer\n        // 3 / Submarine\n        // 2 / Patrol Boat\n        this.ships = [];\n        this.board = this.buildBoard();\n    }\n    buildBoard() {\n        let board = [];\n        for (let i = 0; i < 10; i++) {\n            board[i] = [];\n            for (let j = 0; j < 10; j++) {\n                board[i][j] = 0;\n            }\n        }\n        return board;\n        // return new Array(10).fill(new Array(10).fill(0));\n    }\n    checkSpaceForShip(size, horizontal, y, x) {\n        let pass = true;\n        if (horizontal) {\n            for (let i = 0; i < size; i++) {\n                if (!this.checkSingleSpace(x + i, y)) {\n                    pass = false;\n                    break;\n                }\n            }\n        }\n        else if (!horizontal) {\n            for (let i = 0; i < size; i++) {\n                if (!this.checkSingleSpace(x, y + i)) {\n                    pass = false;\n                    break;\n                }\n            }\n        }\n        return pass;\n    }\n    checkSingleSpace(x, y) {\n        return !this.board[y][x];\n    }\n    placeShip(ship, horizontal, y, x) {\n        // Check that a ship doesn't already exist in any of the spots\n        // Sets value of cell to reference ship sitting on it, and which part of the ship it contains\n        if (this.checkSpaceForShip(ship.size, horizontal, y, x)) {\n            if (horizontal) {\n                for (let i = 0; i < ship.size; i++) {\n                    this.changeValue(x + i, y, [ship, i]);\n                }\n            }\n            else if (!horizontal) {\n                for (let i = 0; i < ship.size; i++) {\n                    this.changeValue(x, y + i, [ship, i]);\n                    // this.board[y + 1][x] = [ship, i + 1];\n                }\n            }\n            // Append ship to the ships array for sunk checking\n            this.ships.push(ship);\n        }\n    }\n    sendHit(ship, spot) {\n        ship.hit(spot);\n    }\n    changeValue(x, y, value) {\n        this.board[y][x] = value;\n    }\n    receiveAttack(x, y) {\n        // Take in coordinates, return number code for new space result\n        if (typeof this.board[y][x] === \"number\") {\n            // Space does not contain un-hit ship\n            if (this.board[y][x] > 1) {\n                // Space has already been attacked -> invalid move\n                return 0;\n            }\n            else if (this.board[y][x] === 0) {\n                // Space is empty -> miss\n                this.changeValue(x, y, 2);\n                return 2;\n            }\n        }\n        else {\n            // Space has a ship on it -> hit\n            const theArr = this.board[y][x];\n            this.sendHit(theArr[0], theArr[1]);\n            this.changeValue(x, y, 3);\n            console.log(theArr[0].hitMarker);\n            if (theArr[0].isSunk()) {\n                console.log(this.board);\n                return 4;\n            }\n            else {\n                return 3;\n            }\n        }\n    }\n    checkAllSunk() {\n        // Checks all ships are sunk\n        // To check all sunk, iterate through array running Ship.isSunk(); on each\n        let allSunk = true;\n        this.board.forEach((arr) => {\n            arr.forEach((cell) => {\n                if (typeof cell != \"number\") {\n                    allSunk = false;\n                }\n            });\n        });\n        return allSunk;\n    }\n}\n","import { Ship } from \"./ship\";\nexport class Player {\n    constructor(name, turn, board) {\n        this.name = name;\n        this.turn = turn;\n        this.playerboard = board;\n    }\n    attack(x, y, gameboard) {\n        if (this.checkSpace(x, y, gameboard)) {\n            return gameboard.receiveAttack(x, y);\n        }\n    }\n    checkSpace(x, y, gameboard) {\n        return (gameboard.board[y][x] === 0 || typeof gameboard.board[y][x] === \"object\");\n    }\n    randomAttack(gameboard) {\n        const x = Math.min(Math.round(Math.random() * 10), 9);\n        const y = Math.min(Math.round(Math.random() * 10), 9);\n        if (this.checkSpace(x, y, gameboard)) {\n            const result = this.attack(x, y, gameboard);\n            return [x, y, result];\n        }\n        else {\n            // If move is invalid, call function again\n            return this.randomAttack(gameboard);\n        }\n    }\n    placeRandomShip(gameboard, size, name) {\n        let x = Math.round(Math.random() * 10);\n        // TO DO - Subtract x/y value based on size of ship so the ship cannot go past the end of the board (x-axis for horizontal, y-axis for vertical)\n        let y = Math.round(Math.random() * 10);\n        const horiz = !!Math.round(Math.random());\n        if (x === 10) {\n            x--;\n        }\n        if (y === 10) {\n            y--;\n        }\n        if (horiz) {\n            x = Math.abs(x - size);\n        }\n        else {\n            y = Math.abs(y - size);\n        }\n        if (gameboard.checkSpaceForShip(size, horiz, y, x)) {\n            const ship = new Ship(size, name);\n            gameboard.placeShip(ship, true, y, x);\n        }\n        else {\n            return 0;\n        }\n    }\n}\n","export class Ship {\n    constructor(length, name) {\n        this.name = name;\n        this.size = length;\n        this.hitMarker = new Array(length).fill(false);\n        this.sunk = false;\n    }\n    hit(number) {\n        this.hitMarker[number] = true;\n    }\n    isSunk() {\n        return this.checkArrayTruth(this.hitMarker);\n    }\n    isTrue(element) {\n        return element.valueOf();\n    }\n    checkArrayTruth(array) {\n        return array.every(this.isTrue);\n    }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/game.ts\");\n",""],"names":[],"sourceRoot":""}